using StrongGrid.Models;
using System.Threading;
using System.Threading.Tasks;

namespace StrongGrid.Resources
{
	/// <summary>
	/// Allows you to create and manage sender identities for Marketing Campaigns.
	/// </summary>
	/// <remarks>
	/// See <a href="https://sendgrid.api-docs.io/v3.0/senders">SendGrid documentation</a> for more information.
	/// </remarks>
	public interface ISenderIdentities
	{
		/// <summary>
		/// Create a sender identity.
		/// </summary>
		/// <param name="nickname">The nickname.</param>
		/// <param name="from">From.</param>
		/// <param name="replyTo">The reply to.</param>
		/// <param name="address1">The address1.</param>
		/// <param name="address2">The address2.</param>
		/// <param name="city">The city.</param>
		/// <param name="state">The state.</param>
		/// <param name="zip">The zip.</param>
		/// <param name="country">The country.</param>
		/// <param name="cancellationToken">The cancellation token.</param>
		/// <returns>
		/// The <see cref="SenderIdentity" />.
		/// </returns>
		Task<SenderIdentity> CreateAsync(string nickname, MailAddress from, MailAddress replyTo, string address1, string address2, string city, string state, string zip, string country, CancellationToken cancellationToken = default);

		/// <summary>
		/// Retrieve all sender identities.
		/// </summary>
		/// <param name="cancellationToken">Cancellation token.</param>
		/// <returns>
		/// An array of <see cref="SenderIdentity" />.
		/// </returns>
		Task<SenderIdentity[]> GetAllAsync(CancellationToken cancellationToken = default);

		/// <summary>
		/// Determine which of SendGrid's verification processes have been completed for an account.
		/// </summary>
		/// <param name="cancellationToken">Cancellation token.</param>
		/// <returns>
		/// Two boolean values: the first value indicates whether a sender had been verified and the second value indicates whether a domain has been verified.
		/// </returns>
		Task<(bool SenderVerified, bool DomainVerified)> GetCompletedStepsAsync(CancellationToken cancellationToken = default);

		/// <summary>
		/// Get the list of domains known to implement DMARC and categorize them by failure type â€” hard failure or soft failure.
		/// </summary>
		/// <param name="cancellationToken">Cancellation token.</param>
		/// <returns>
		/// The list of domains known to implement DMARC.
		/// </returns>
		Task<DomainsDmarc> GetDmarcDomains(CancellationToken cancellationToken = default);

		/// <summary>
		/// Verify a sender request.
		/// </summary>
		/// <param name="verificationToken">The verification token which is generated by SendGrid and included in the verification email delivered to the address that is pending verification.</param>
		/// <param name="cancellationToken">Cancellation token.</param>
		/// <returns>
		/// The asynchronous task.
		/// </returns>
		Task VerifySenderAsync(string verificationToken, CancellationToken cancellationToken = default);
	}
}
